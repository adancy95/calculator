{"version":3,"sources":["Components/OperandButton.js","Components/Display.js","App.js","serviceWorker.js","index.js"],"names":["OperandButton","props","handleChange","e","console","log","target","value","setButtonValue","bind","className","this","buttonLabel","onClick","React","Component","Display","handleDisplayInput","setState","display","state","handleEqual","total","eval","output","handleClear","type","readOnly","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a229fae9.chunk.js","sourcesContent":["import React from 'react';\n\nclass OperandButton extends React.Component{\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange = (e) => {\n    console.log(e.target.value)\n    this.props.setButtonValue(e.target.value)\n  }\n\n  render() {\n    return (\n      <div>\n        <button className=\"operand-btn\" value={this.props.buttonLabel} onClick={this.handleChange}>{this.props.buttonLabel}</button>\n      </div>\n    )\n  }\n}\n\n\n\n\nexport default OperandButton","import React from 'react'\nimport OperandButton from './OperandButton'\nimport '../App.css';\n\nclass Display extends React.Component{\n  constructor(props) {\n    super(props)\n    this.state = {\n      display: \"\",\n      output: 0,\n    }\n    this.handleDisplayInput = this.handleDisplayInput.bind(this)\n  }\n  handleDisplayInput = (buttonLabel) => {\n    buttonLabel === \"%\" ? this.setState({ display: this.state.display+ \"/100\"}) : this.setState({ display: this.state.display+buttonLabel })\n    console.log(buttonLabel)\n    // this.setState({ display: this.state.display+buttonLabel })\n    console.log(this.state)\n  }\n\n  handleEqual = () => {\n    let total = eval(this.state.display)\n    this.setState({output: total })\n  }\n\n  handleClear = () => {\n    this.setState({\n      display: \"\",\n      output: 0\n    })\n  }\n  render() {\n    return (\n      <div className=\"calculator\">\n      \n        <div className=\"display\">\n          <input className=\"display-text\" type=\"number\" readOnly value={this.state.output} />\n          <hr/>\n          <input className=\"display-text\" type=\"text\" readOnly value={this.state.display}/>\n        </div>\n   \n        <div className=\"button-row\">\n        <OperandButton buttonLabel=\"C\" setButtonValue={this.handleClear} />\n        <OperandButton buttonLabel=\"Â±\" setButtonValue={this.handleDisplayInput}/>\n        <OperandButton buttonLabel=\"%\" setButtonValue={this.handleDisplayInput}/>\n        <OperandButton buttonLabel=\"/\" setButtonValue={this.handleDisplayInput}/>\n      </div>\n      <div className=\"button-row\">\n        <OperandButton buttonLabel=\"7\" setButtonValue={this.handleDisplayInput} />\n        <OperandButton buttonLabel=\"8\" setButtonValue={this.handleDisplayInput}/>\n        <OperandButton buttonLabel=\"9\" setButtonValue={this.handleDisplayInput}/>\n        <OperandButton buttonLabel = \"*\" setButtonValue={this.handleDisplayInput}/>\n      </div>\n      <div className=\"button-row\">\n        <OperandButton buttonLabel=\"4\" setButtonValue={this.handleDisplayInput} />\n        <OperandButton buttonLabel=\"5\" setButtonValue={this.handleDisplayInput}/>\n        <OperandButton buttonLabel=\"6\" setButtonValue={this.handleDisplayInput} />\n        <OperandButton buttonLabel=\"-\" setButtonValue={this.handleDisplayInput}/>\n      </div>\n      <div className=\"button-row\">\n        <OperandButton buttonLabel=\"1\" setButtonValue={this.handleDisplayInput} />\n        <OperandButton buttonLabel=\"2\" setButtonValue={this.handleDisplayInput}/>\n        <OperandButton buttonLabel=\"3\" setButtonValue={this.handleDisplayInput}/>\n        <OperandButton buttonLabel=\"+\" setButtonValue={this.handleDisplayInput}/>\n      </div>\n      <div className=\"button-row\">\n        <OperandButton buttonLabel=\"0\" setButtonValue={this.handleDisplayInput} />\n        <OperandButton buttonLabel=\".\" setButtonValue={this.handleDisplayInput} />\n        <OperandButton buttonLabel=\"=\" setButtonValue={this.handleEqual}/>\n\n    \n     \n      </div>\n      </div>\n    )\n  }\n}\n\n  \n\n\n\nexport default Display","import React from 'react';\nimport './App.css';\nimport Display from './Components/Display';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <h1>Calculator</h1>\n      <div><Display/></div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}